AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC infrastructure for Commercial partition with VPN connectivity and VPC endpoints'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    Description: 'Environment name for resource tagging'
  
  ProjectName:
    Type: String
    Default: 'cross-partition-vpn'
    Description: 'Project name for resource naming'

Resources:
  # VPC with no internet gateway for complete private connectivity
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '172.16.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-commercial-vpc'
        - Key: Environment
          Value: !Ref Environment
        - Key: Partition
          Value: 'commercial'

  # Private subnet for potential Lambda deployment
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '172.16.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-commercial-private-subnet'
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: 'private'

  # VPN subnet for VPN Gateway
  VPNSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '172.16.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-commercial-vpn-subnet'
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: 'vpn'

  # VPC Endpoints subnet
  VPCEndpointsSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '172.16.3.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-commercial-endpoints-subnet'
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: 'endpoints'

  # Route table for private subnet - no internet gateway routes
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-commercial-private-rt'
        - Key: Environment
          Value: !Ref Environment

  # Associate private subnet with route table
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Route table for VPC endpoints subnet
  VPCEndpointsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-commercial-endpoints-rt'
        - Key: Environment
          Value: !Ref Environment

  # Associate VPC endpoints subnet with route table
  VPCEndpointsSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPCEndpointsSubnet
      RouteTableId: !Ref VPCEndpointsRouteTable

  # Security group for cross-partition Lambda access
  CrossPartitionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for cross-partition Lambda access'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow all traffic from GovCloud VPC via VPN
        - IpProtocol: -1
          CidrIp: '10.0.0.0/16'
          Description: 'Cross-partition access from GovCloud via VPN'
      SecurityGroupEgress:
        # Allow HTTPS to VPC endpoints
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '172.16.3.0/24'
          Description: 'HTTPS access to VPC endpoints'
        # Allow all traffic back to GovCloud VPC
        - IpProtocol: -1
          CidrIp: '10.0.0.0/16'
          Description: 'Response traffic to GovCloud via VPN'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-commercial-cross-partition-sg'
        - Key: Environment
          Value: !Ref Environment

  # Security group for VPC endpoints
  VPCEndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for VPC endpoints'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow HTTPS from cross-partition security group
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref CrossPartitionSecurityGroup
          Description: 'HTTPS access from cross-partition resources'
        # Allow HTTPS from GovCloud VPC (for direct VPN access)
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '10.0.0.0/16'
          Description: 'HTTPS access from GovCloud via VPN'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-commercial-endpoints-sg'
        - Key: Environment
          Value: !Ref Environment

  # Network ACL for additional security
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-commercial-private-nacl'
        - Key: Environment
          Value: !Ref Environment

  # Allow inbound HTTPS from VPC
  PrivateNetworkAclInboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: '172.16.0.0/16'
      PortRange:
        From: 443
        To: 443

  # Allow inbound from GovCloud VPC
  PrivateNetworkAclInboundGovCloud:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 110
      Protocol: -1
      RuleAction: allow
      CidrBlock: '10.0.0.0/16'

  # Allow outbound HTTPS to VPC endpoints
  PrivateNetworkAclOutboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: '172.16.3.0/24'
      PortRange:
        From: 443
        To: 443

  # Allow outbound to GovCloud VPC
  PrivateNetworkAclOutboundGovCloud:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 110
      Protocol: -1
      RuleAction: allow
      CidrBlock: '10.0.0.0/16'

  # Associate private subnet with Network ACL
  PrivateSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      NetworkAclId: !Ref PrivateNetworkAcl

  # VPC Flow Logs for monitoring
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  # CloudWatch Log Group for VPC Flow Logs
  VPCFlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vpc/flowlogs/${ProjectName}-commercial'
      RetentionInDays: 30

  # VPC Flow Logs
  VPCFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogsGroup
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-commercial-flow-logs'
        - Key: Environment
          Value: !Ref Environment

Outputs:
  VPCId:
    Description: 'VPC ID for Commercial partition'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'

  PrivateSubnetId:
    Description: 'Private subnet ID for potential Lambda deployment'
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetId'

  VPNSubnetId:
    Description: 'VPN subnet ID for VPN Gateway'
    Value: !Ref VPNSubnet
    Export:
      Name: !Sub '${AWS::StackName}-VPNSubnetId'

  VPCEndpointsSubnetId:
    Description: 'VPC endpoints subnet ID'
    Value: !Ref VPCEndpointsSubnet
    Export:
      Name: !Sub '${AWS::StackName}-VPCEndpointsSubnetId'

  CrossPartitionSecurityGroupId:
    Description: 'Security group ID for cross-partition access'
    Value: !Ref CrossPartitionSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-CrossPartitionSecurityGroupId'

  VPCEndpointsSecurityGroupId:
    Description: 'Security group ID for VPC endpoints'
    Value: !Ref VPCEndpointsSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-VPCEndpointsSecurityGroupId'

  PrivateRouteTableId:
    Description: 'Route table ID for private subnet'
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTableId'

  VPCCidr:
    Description: 'CIDR block for Commercial VPC'
    Value: '172.16.0.0/16'
    Export:
      Name: !Sub '${AWS::StackName}-VPCCidr'